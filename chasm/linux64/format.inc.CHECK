macro format.string [piece],

; Assuming 'eax' holds the decimal number
; 'edi' points to the buffer where the ASCII string will be stored

mov ecx, 0  ; Counter for digits

convert_loop:
    xor edx, edx ; Clear edx for division
    mov ebx, 10  ; Divisor
    div ebx      ; eax = eax / 10, edx = eax % 10

    add dl, '0'  ; Convert digit to ASCII
    push dx      ; Push the ASCII digit onto the stack (or store in a buffer)
    inc ecx      ; Increment digit counter

    test eax, eax ; Check if quotient is zero
    jnz convert_loop

; Now, pop the digits from the stack and store them in the buffer
; in the correct order (or reverse the buffer if stored directly)
